{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useContext, useEffect, useState } from \"react\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport * as Linking from \"expo-linking\";\nimport { AppContext } from \"../context\";\nimport { io } from \"socket.io-client\";\nimport { host } from \"../Constants\";\nimport { hostSocketIO } from \"../Constants\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar socket = io(hostSocketIO);\n\nvar Room = function Room(_ref) {\n  var room = _ref.room;\n  var url = \"http://\" + hostSocketIO + \"/company/\" + room.companySlug + \"/room/\" + room.unique_name;\n\n  var _useState = useState(room.currentNumber),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var roomName = room.companySlug + \"_\" + room.unique_name;\n\n  var openUrl = function openUrl() {\n    return Linking.openURL(url);\n  };\n\n  var addition = function addition() {\n    return setValue(value + 1);\n  };\n\n  var subtraction = function subtraction() {\n    return setValue(value - 1);\n  };\n\n  var emitValue = function emitValue() {\n    var response;\n    return _regeneratorRuntime.async(function emitValue$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(fetch(host + \"/room/\" + room.unique_name + \"/current\", {\n              method: \"POST\",\n              headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify({\n                number: value\n              })\n            }));\n\n          case 3:\n            response = _context.sent;\n            socket.emit(\"emmitToRoom\", {\n              room: roomName,\n              value: value\n            });\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 7:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 10]], Promise);\n  };\n\n  useEffect(emitValue, [value]);\n  return _jsx(View, {\n    children: _jsxs(View, {\n      style: styles.roomContainer,\n      children: [_jsx(Text, {\n        style: {\n          fontSize: 30,\n          marginBottom: 10\n        },\n        children: room.name\n      }), _jsxs(View, {\n        style: {\n          marginBottom: 10\n        },\n        children: [_jsx(Text, {\n          children: \"URL \"\n        }), _jsx(TouchableHighlight, {\n          onPress: openUrl,\n          children: _jsx(Text, {\n            style: {\n              color: \"#fff\",\n              textDecorationLine: \"underline\"\n            },\n            children: url\n          })\n        })]\n      }), _jsxs(Text, {\n        style: {\n          color: \"#fff\",\n          marginBottom: 10\n        },\n        children: [\"Last generated number \", room.lastNumber]\n      }), _jsxs(View, {\n        style: {\n          flexDirection: \"row\",\n          alignItems: \"center\"\n        },\n        children: [_jsx(Text, {\n          style: {\n            color: \"#fff\"\n          },\n          children: \"Current Number: \"\n        }), _jsx(TouchableOpacity, {\n          style: styles.sendButton,\n          onPress: subtraction,\n          children: _jsx(Text, {\n            children: \"-\"\n          })\n        }), _jsx(TextInput, {\n          style: styles.input,\n          value: value,\n          editable: false\n        }), _jsx(TouchableOpacity, {\n          style: styles.sendButton,\n          onPress: addition,\n          children: _jsx(Text, {\n            children: \"+\"\n          })\n        })]\n      })]\n    })\n  });\n};\n\nvar Emit = function Emit() {\n  var user = useContext(AppContext);\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      rooms = _useState4[0],\n      setRooms = _useState4[1];\n\n  var getRooms = function getRooms() {\n    var companyId, response;\n    return _regeneratorRuntime.async(function getRooms$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"companyId\"));\n\n          case 3:\n            companyId = _context2.sent;\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(fetch(host + \"/room/user/company/\" + companyId, {\n              method: \"POST\",\n              headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify({\n                user: user.user\n              })\n            }));\n\n          case 6:\n            response = _context2.sent;\n            _context2.next = 9;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 9:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 12:\n            _context2.prev = 12;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log(_context2.t0);\n\n          case 15:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 12]], Promise);\n  };\n\n  useEffect(function _callee() {\n    var r;\n    return _regeneratorRuntime.async(function _callee$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(getRooms());\n\n          case 2:\n            r = _context3.sent;\n            setRooms(r);\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, []);\n  return _jsx(ScrollView, {\n    contentContainerStyle: {\n      alignItems: \"center\"\n    },\n    children: rooms.map(function (room) {\n      return _jsx(View, {\n        style: styles.cardContainer,\n        children: _jsx(Room, {\n          room: room\n        })\n      }, room.id);\n    })\n  });\n};\n\nvar styles = StyleSheet.create({\n  cardContainer: {\n    width: \"95%\",\n    maxWidth: 480,\n    padding: 30,\n    margin: 10,\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 5\n    },\n    shadowOpacity: 0.34,\n    shadowRadius: 6.27,\n    elevation: 10,\n    borderRadius: 10\n  },\n  roomContainer: {\n    justifyContent: \"space-between\",\n    marginBottom: 10\n  },\n  input: {\n    width: 60,\n    height: 40,\n    backgroundColor: \"#5DBDF2\",\n    color: \"#fff\",\n    textAlign: \"center\"\n  },\n  sendButton: {\n    backgroundColor: \"#fff\",\n    height: 40,\n    width: 40,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  }\n});\nexport default Emit;","map":{"version":3,"sources":["C:/Users/ez99032/Documents/Apps/linestron/linestron-front-end/components/Emit.js"],"names":["useContext","useEffect","useState","AsyncStorage","Linking","AppContext","io","host","hostSocketIO","socket","Room","room","url","companySlug","unique_name","currentNumber","value","setValue","roomName","openUrl","openURL","addition","subtraction","emitValue","fetch","method","headers","Accept","body","JSON","stringify","number","response","emit","json","console","log","styles","roomContainer","fontSize","marginBottom","name","color","textDecorationLine","lastNumber","flexDirection","alignItems","sendButton","input","Emit","user","rooms","setRooms","getRooms","getItem","companyId","r","map","cardContainer","id","StyleSheet","create","width","maxWidth","padding","margin","shadowColor","shadowOffset","height","shadowOpacity","shadowRadius","elevation","borderRadius","justifyContent","backgroundColor","textAlign"],"mappings":";;AAAA,SAASA,UAAT,EAAqBC,SAArB,EAAgCC,QAAhC,QAAgD,OAAhD;;;;;;;;AAEA,OAAOC,YAAP,MAAyB,2CAAzB;AACA,OAAO,KAAKC,OAAZ,MAAyB,cAAzB;AACA,SAASC,UAAT;AACA,SAASC,EAAT,QAAmB,kBAAnB;AACA,SAASC,IAAT;AACA,SAASC,YAAT;;;AACA,IAAMC,MAAM,GAAGH,EAAE,CAACE,YAAD,CAAjB;;AAGA,IAAME,IAAI,GAAG,SAAPA,IAAO,OAAc;AAAA,MAAXC,IAAW,QAAXA,IAAW;AAC1B,MAAMC,GAAG,eAAaJ,YAAb,iBAAqCG,IAAI,CAACE,WAA1C,cAA8DF,IAAI,CAACG,WAA5E;;AACA,kBAA0BZ,QAAQ,CAACS,IAAI,CAACI,aAAN,CAAlC;AAAA;AAAA,MAAOC,KAAP;AAAA,MAAcC,QAAd;;AACA,MAAMC,QAAQ,GAAGP,IAAI,CAACE,WAAL,GAAmB,GAAnB,GAAyBF,IAAI,CAACG,WAA/C;;AACA,MAAMK,OAAO,GAAG,SAAVA,OAAU;AAAA,WAAMf,OAAO,CAACgB,OAAR,CAAgBR,GAAhB,CAAN;AAAA,GAAhB;;AACA,MAAMS,QAAQ,GAAG,SAAXA,QAAW;AAAA,WAAMJ,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAd;AAAA,GAAjB;;AACA,MAAMM,WAAW,GAAG,SAAdA,WAAc;AAAA,WAAML,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAd;AAAA,GAApB;;AAEA,MAAMO,SAAS,GAAG,SAAZA,SAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEOC,KAAK,CAACjB,IAAI,GAAG,QAAP,GAAkBI,IAAI,CAACG,WAAvB,GAAqC,UAAtC,EAAkD;AAC7EW,cAAAA,MAAM,EAAE,MADqE;AAE7EC,cAAAA,OAAO,EAAE;AAAEC,gBAAAA,MAAM,EAAE,kBAAV;AAA8B,gCAAgB;AAA9C,eAFoE;AAG7EC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEC,gBAAAA,MAAM,EAAEf;AAAV,eAAf;AAHuE,aAAlD,CAFZ;;AAAA;AAEVgB,YAAAA,QAFU;AAQhBvB,YAAAA,MAAM,CAACwB,IAAP,CAAY,aAAZ,EAA2B;AAAEtB,cAAAA,IAAI,EAAEO,QAAR;AAAkBF,cAAAA,KAAK,EAAEA;AAAzB,aAA3B;AARgB;AAAA,6CASHgB,QAAQ,CAACE,IAAT,EATG;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAWhBC,YAAAA,OAAO,CAACC,GAAR;;AAXgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB;;AAeAnC,EAAAA,SAAS,CAACsB,SAAD,EAAY,CAACP,KAAD,CAAZ,CAAT;AACA,SACC,KAAC,IAAD;AAAA,cACC,MAAC,IAAD;AAAM,MAAA,KAAK,EAAEqB,MAAM,CAACC,aAApB;AAAA,iBACC,KAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAAEC,UAAAA,QAAQ,EAAE,EAAZ;AAAgBC,UAAAA,YAAY,EAAE;AAA9B,SAAb;AAAA,kBAAkD7B,IAAI,CAAC8B;AAAvD,QADD,EAEC,MAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAAED,UAAAA,YAAY,EAAE;AAAhB,SAAb;AAAA,mBACC,KAAC,IAAD;AAAA;AAAA,UADD,EAEC,KAAC,kBAAD;AAAoB,UAAA,OAAO,EAAErB,OAA7B;AAAA,oBACC,KAAC,IAAD;AAAM,YAAA,KAAK,EAAE;AAAEuB,cAAAA,KAAK,EAAE,MAAT;AAAiBC,cAAAA,kBAAkB,EAAE;AAArC,aAAb;AAAA,sBAAkE/B;AAAlE;AADD,UAFD;AAAA,QAFD,EAQC,MAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAAE8B,UAAAA,KAAK,EAAE,MAAT;AAAiBF,UAAAA,YAAY,EAAE;AAA/B,SAAb;AAAA,6CAAyE7B,IAAI,CAACiC,UAA9E;AAAA,QARD,EASC,MAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAAEC,UAAAA,aAAa,EAAE,KAAjB;AAAwBC,UAAAA,UAAU,EAAE;AAApC,SAAb;AAAA,mBACC,KAAC,IAAD;AAAM,UAAA,KAAK,EAAE;AAAEJ,YAAAA,KAAK,EAAE;AAAT,WAAb;AAAA;AAAA,UADD,EAEC,KAAC,gBAAD;AAAkB,UAAA,KAAK,EAAEL,MAAM,CAACU,UAAhC;AAA4C,UAAA,OAAO,EAAEzB,WAArD;AAAA,oBACC,KAAC,IAAD;AAAA;AAAA;AADD,UAFD,EAKC,KAAC,SAAD;AAAW,UAAA,KAAK,EAAEe,MAAM,CAACW,KAAzB;AAAgC,UAAA,KAAK,EAAEhC,KAAvC;AAA8C,UAAA,QAAQ,EAAE;AAAxD,UALD,EAMC,KAAC,gBAAD;AAAkB,UAAA,KAAK,EAAEqB,MAAM,CAACU,UAAhC;AAA4C,UAAA,OAAO,EAAE1B,QAArD;AAAA,oBACC,KAAC,IAAD;AAAA;AAAA;AADD,UAND;AAAA,QATD;AAAA;AADD,IADD;AAwBA,CAhDD;;AAkDA,IAAM4B,IAAI,GAAG,SAAPA,IAAO,GAAM;AAClB,MAAMC,IAAI,GAAGlD,UAAU,CAACK,UAAD,CAAvB;;AACA,mBAA0BH,QAAQ,CAAC,EAAD,CAAlC;AAAA;AAAA,MAAOiD,KAAP;AAAA,MAAcC,QAAd;;AACA,MAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAESlD,YAAY,CAACmD,OAAb,CAAqB,WAArB,CAFT;;AAAA;AAETC,YAAAA,SAFS;AAAA;AAAA,6CAGQ/B,KAAK,CAACjB,IAAI,GAAG,qBAAP,GAA+BgD,SAAhC,EAA2C;AACtE9B,cAAAA,MAAM,EAAE,MAD8D;AAEtEC,cAAAA,OAAO,EAAE;AAAEC,gBAAAA,MAAM,EAAE,kBAAV;AAA8B,gCAAgB;AAA9C,eAF6D;AAGtEC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEoB,gBAAAA,IAAI,EAAEA,IAAI,CAACA;AAAb,eAAf;AAHgE,aAA3C,CAHb;;AAAA;AAGTlB,YAAAA,QAHS;AAAA;AAAA,6CAQFA,QAAQ,CAACE,IAAT,EARE;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAUfC,YAAAA,OAAO,CAACC,GAAR;;AAVe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAcAnC,EAAAA,SAAS,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACOoD,QAAQ,EADf;;AAAA;AACHG,YAAAA,CADG;AAETJ,YAAAA,QAAQ,CAACI,CAAD,CAAR;;AAFS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,EAGN,EAHM,CAAT;AAKA,SACC,KAAC,UAAD;AAAY,IAAA,qBAAqB,EAAE;AAAEV,MAAAA,UAAU,EAAE;AAAd,KAAnC;AAAA,cACEK,KAAK,CAACM,GAAN,CAAU,UAAC9C,IAAD,EAAU;AACpB,aACC,KAAC,IAAD;AAAoB,QAAA,KAAK,EAAE0B,MAAM,CAACqB,aAAlC;AAAA,kBACC,KAAC,IAAD;AAAM,UAAA,IAAI,EAAE/C;AAAZ;AADD,SAAWA,IAAI,CAACgD,EAAhB,CADD;AAKA,KANA;AADF,IADD;AAWA,CAjCD;;AAmCA,IAAMtB,MAAM,GAAGuB,UAAU,CAACC,MAAX,CAAkB;AAChCH,EAAAA,aAAa,EAAE;AACdI,IAAAA,KAAK,EAAE,KADO;AAEdC,IAAAA,QAAQ,EAAE,GAFI;AAGdC,IAAAA,OAAO,EAAE,EAHK;AAIdC,IAAAA,MAAM,EAAE,EAJM;AAKdC,IAAAA,WAAW,EAAE,MALC;AAMdC,IAAAA,YAAY,EAAE;AACbL,MAAAA,KAAK,EAAE,CADM;AAEbM,MAAAA,MAAM,EAAE;AAFK,KANA;AAUdC,IAAAA,aAAa,EAAE,IAVD;AAWdC,IAAAA,YAAY,EAAE,IAXA;AAYdC,IAAAA,SAAS,EAAE,EAZG;AAadC,IAAAA,YAAY,EAAE;AAbA,GADiB;AAgBhClC,EAAAA,aAAa,EAAE;AACdmC,IAAAA,cAAc,EAAE,eADF;AAEdjC,IAAAA,YAAY,EAAE;AAFA,GAhBiB;AAoBhCQ,EAAAA,KAAK,EAAE;AACNc,IAAAA,KAAK,EAAE,EADD;AAENM,IAAAA,MAAM,EAAE,EAFF;AAGNM,IAAAA,eAAe,EAAE,SAHX;AAINhC,IAAAA,KAAK,EAAE,MAJD;AAKNiC,IAAAA,SAAS,EAAE;AALL,GApByB;AA2BhC5B,EAAAA,UAAU,EAAE;AACX2B,IAAAA,eAAe,EAAE,MADN;AAEXN,IAAAA,MAAM,EAAE,EAFG;AAGXN,IAAAA,KAAK,EAAE,EAHI;AAIXhB,IAAAA,UAAU,EAAE,QAJD;AAKX2B,IAAAA,cAAc,EAAE;AALL;AA3BoB,CAAlB,CAAf;AAoCA,eAAexB,IAAf","sourcesContent":["import { useContext, useEffect, useState } from \"react\";\r\nimport { ScrollView, StyleSheet, Text, TextInput, TouchableHighlight, TouchableOpacity, View } from \"react-native\";\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport * as Linking from \"expo-linking\";\r\nimport { AppContext } from \"../context\";\r\nimport { io } from \"socket.io-client\";\r\nimport { host } from \"../Constants\";\r\nimport { hostSocketIO } from \"../Constants\";\r\nconst socket = io(hostSocketIO);\r\n// const socket = io(\"localhost:3000\");\r\n\r\nconst Room = ({ room }) => {\r\n\tconst url = `http://${hostSocketIO}/company/${room.companySlug}/room/${room.unique_name}`;\r\n\tconst [value, setValue] = useState(room.currentNumber);\r\n\tconst roomName = room.companySlug + \"_\" + room.unique_name;\r\n\tconst openUrl = () => Linking.openURL(url);\r\n\tconst addition = () => setValue(value + 1);\r\n\tconst subtraction = () => setValue(value - 1);\r\n\r\n\tconst emitValue = async () => {\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(host + \"/room/\" + room.unique_name + \"/current\", {\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\theaders: { Accept: \"application/json\", \"Content-Type\": \"application/json\" },\r\n\t\t\t\tbody: JSON.stringify({ number: value }),\r\n\t\t\t});\r\n\r\n\t\t\tsocket.emit(\"emmitToRoom\", { room: roomName, value: value });\r\n\t\t\treturn await response.json();\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\t};\r\n\r\n\tuseEffect(emitValue, [value]);\r\n\treturn (\r\n\t\t<View>\r\n\t\t\t<View style={styles.roomContainer}>\r\n\t\t\t\t<Text style={{ fontSize: 30, marginBottom: 10 }}>{room.name}</Text>\r\n\t\t\t\t<View style={{ marginBottom: 10 }}>\r\n\t\t\t\t\t<Text>URL </Text>\r\n\t\t\t\t\t<TouchableHighlight onPress={openUrl}>\r\n\t\t\t\t\t\t<Text style={{ color: \"#fff\", textDecorationLine: \"underline\" }}>{url}</Text>\r\n\t\t\t\t\t</TouchableHighlight>\r\n\t\t\t\t</View>\r\n\t\t\t\t<Text style={{ color: \"#fff\", marginBottom: 10 }}>Last generated number {room.lastNumber}</Text>\r\n\t\t\t\t<View style={{ flexDirection: \"row\", alignItems: \"center\" }}>\r\n\t\t\t\t\t<Text style={{ color: \"#fff\" }}>Current Number: </Text>\r\n\t\t\t\t\t<TouchableOpacity style={styles.sendButton} onPress={subtraction}>\r\n\t\t\t\t\t\t<Text>-</Text>\r\n\t\t\t\t\t</TouchableOpacity>\r\n\t\t\t\t\t<TextInput style={styles.input} value={value} editable={false} />\r\n\t\t\t\t\t<TouchableOpacity style={styles.sendButton} onPress={addition}>\r\n\t\t\t\t\t\t<Text>+</Text>\r\n\t\t\t\t\t</TouchableOpacity>\r\n\t\t\t\t</View>\r\n\t\t\t</View>\r\n\t\t</View>\r\n\t);\r\n};\r\n\r\nconst Emit = () => {\r\n\tconst user = useContext(AppContext);\r\n\tconst [rooms, setRooms] = useState([]);\r\n\tconst getRooms = async () => {\r\n\t\ttry {\r\n\t\t\tconst companyId = await AsyncStorage.getItem(\"companyId\");\r\n\t\t\tconst response = await fetch(host + \"/room/user/company/\" + companyId, {\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\theaders: { Accept: \"application/json\", \"Content-Type\": \"application/json\" },\r\n\t\t\t\tbody: JSON.stringify({ user: user.user }),\r\n\t\t\t});\r\n\t\t\treturn await response.json();\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\t};\r\n\r\n\tuseEffect(async () => {\r\n\t\tconst r = await getRooms();\r\n\t\tsetRooms(r);\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<ScrollView contentContainerStyle={{ alignItems: \"center\" }}>\r\n\t\t\t{rooms.map((room) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<View key={room.id} style={styles.cardContainer}>\r\n\t\t\t\t\t\t<Room room={room} />\r\n\t\t\t\t\t</View>\r\n\t\t\t\t);\r\n\t\t\t})}\r\n\t\t</ScrollView>\r\n\t);\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n\tcardContainer: {\r\n\t\twidth: \"95%\",\r\n\t\tmaxWidth: 480,\r\n\t\tpadding: 30,\r\n\t\tmargin: 10,\r\n\t\tshadowColor: \"#000\",\r\n\t\tshadowOffset: {\r\n\t\t\twidth: 0,\r\n\t\t\theight: 5,\r\n\t\t},\r\n\t\tshadowOpacity: 0.34,\r\n\t\tshadowRadius: 6.27,\r\n\t\televation: 10,\r\n\t\tborderRadius: 10,\r\n\t},\r\n\troomContainer: {\r\n\t\tjustifyContent: \"space-between\",\r\n\t\tmarginBottom: 10,\r\n\t},\r\n\tinput: {\r\n\t\twidth: 60,\r\n\t\theight: 40,\r\n\t\tbackgroundColor: \"#5DBDF2\",\r\n\t\tcolor: \"#fff\",\r\n\t\ttextAlign: \"center\",\r\n\t},\r\n\tsendButton: {\r\n\t\tbackgroundColor: \"#fff\",\r\n\t\theight: 40,\r\n\t\twidth: 40,\r\n\t\talignItems: \"center\",\r\n\t\tjustifyContent: \"center\",\r\n\t},\r\n});\r\n\r\nexport default Emit;\r\n"]},"metadata":{},"sourceType":"module"}