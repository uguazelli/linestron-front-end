{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport ToastContext from \"./context\";\nimport Toast from \"../toast-container\";\n\nvar ToastProvider = function ToastProvider(_ref) {\n  var children = _ref.children,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var toastRef = useRef(null);\n\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      refState = _useState2[0],\n      setRefState = _useState2[1];\n\n  useEffect(function () {\n    setRefState(toastRef.current);\n  }, []);\n  return React.createElement(ToastContext.Provider, {\n    value: refState\n  }, children, React.createElement(Toast, _extends({\n    ref: toastRef\n  }, props)));\n};\n\nexport default ToastProvider;","map":{"version":3,"sources":["provider.tsx"],"names":["ToastProvider","props","toastRef","useRef","useState","useEffect","setRefState","refState"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,SAAA,EAAA,MAAA,EAAA,QAAA,QAAA,OAAA;AACA,OAAA,YAAA;AACA,OAAA,KAAA;;AAEA,IAAMA,aAAwB,GAAG,SAA3BA,aAA2B,OAA4B;AAAA,MAA3B,QAA2B,QAA3B,QAA2B;AAAA,MAAZC,KAAY;;AAC3D,MAAMC,QAAQ,GAAGC,MAAM,CAAvB,IAAuB,CAAvB;;AACA,kBAAgCC,QAAQ,CAAxC,EAAwC,CAAxC;AAAA;AAAA,MAAM,QAAN;AAAA,MAAM,WAAN;;AAEAC,EAAAA,SAAS,CAAC,YAAM;AACdC,IAAAA,WAAW,CAACJ,QAAQ,CAApBI,OAAW,CAAXA;AADO,GAAA,EAATD,EAAS,CAATA;AAIA,SACE,KAAA,CAAA,aAAA,CAAC,YAAD,CAAA,QAAA,EAAA;AAAuB,IAAA,KAAK,EAAEE;AAA9B,GAAA,EAAA,QAAA,EAEE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,QAAA,CAAA;AAAO,IAAA,GAAG,EAAEL;AAAZ,GAAA,EAHJ,KAGI,CAAA,CAFF,CADF;AARF,CAAA;;AAgBA,eAAA,aAAA","sourcesContent":["import React, { FC, useEffect, useRef, useState } from \"react\";\r\nimport ToastContext from \"./context\";\r\nimport Toast, { Props } from \"../toast-container\";\r\n\r\nconst ToastProvider: FC<Props> = ({ children, ...props }) => {\r\n  const toastRef = useRef(null);\r\n  const [refState, setRefState] = useState({});\r\n\r\n  useEffect(() => {\r\n    setRefState(toastRef.current as any);\r\n  }, []);\r\n\r\n  return (\r\n    <ToastContext.Provider value={refState as any}>\r\n      {children}\r\n      <Toast ref={toastRef} {...props} />\r\n    </ToastContext.Provider>\r\n  );\r\n};\r\n\r\nexport default ToastProvider;\r\n"]},"metadata":{},"sourceType":"module"}