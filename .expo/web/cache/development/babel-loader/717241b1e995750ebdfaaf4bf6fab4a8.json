{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useEffect, useState } from \"react\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nexport function useDimensions() {\n  var _useState = useState(Dimensions.get(\"window\")),\n      _useState2 = _slicedToArray(_useState, 2),\n      dimensions = _useState2[0],\n      setDimensions = _useState2[1];\n\n  var onChange = function onChange(_ref) {\n    var window = _ref.window;\n    setDimensions(window);\n  };\n\n  useEffect(function () {\n    var subscription = Dimensions.addEventListener(\"change\", onChange);\n    return function () {\n      if (typeof (subscription === null || subscription === void 0 ? void 0 : subscription.remove) === \"function\") {\n        subscription.remove();\n      } else {\n        Dimensions.removeEventListener(\"change\", onChange);\n      }\n    };\n  }, []);\n  return dimensions;\n}","map":{"version":3,"sources":["useDimensions.ts"],"names":["useState","Dimensions","onChange","window","setDimensions","useEffect","subscription"],"mappings":";AAAA,SAAA,SAAA,EAAA,QAAA,QAAA,OAAA;;AAGA,OAAO,SAAA,aAAA,GAAyB;AAC9B,kBAAoCA,QAAQ,CAACC,UAAU,CAAVA,GAAAA,CAA7C,QAA6CA,CAAD,CAA5C;AAAA;AAAA,MAAM,UAAN;AAAA,MAAM,aAAN;;AAEA,MAAMC,QAAQ,GAAG,SAAXA,QAAW,OAAwC;AAAA,QAArCC,MAAqC,QAArCA,MAAqC;AACvDC,IAAAA,aAAa,CAAbA,MAAa,CAAbA;AADF,GAAA;;AAIAC,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMC,YAAY,GAAGL,UAAU,CAAVA,gBAAAA,CAAAA,QAAAA,EAArB,QAAqBA,CAArB;AAEA,WAAO,YAAM;AAEX,UAAI,QAAOK,YAAP,KAAA,IAAOA,IAAAA,YAAP,KAAA,KAAA,CAAOA,GAAP,KAAA,CAAOA,GAAAA,YAAY,CAAnB,MAAA,MAAJ,UAAA,EAAgD;AAE9CA,QAAAA,YAAY,CAAZA,MAAAA;AAFF,OAAA,MAGO;AAELL,QAAAA,UAAU,CAAVA,mBAAAA,CAAAA,QAAAA,EAAAA,QAAAA;AACD;AARH,KAAA;AAHO,GAAA,EAATI,EAAS,CAATA;AAeA,SAAA,UAAA;AACD","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { Dimensions, ScaledSize } from \"react-native\";\r\n\r\nexport function useDimensions() {\r\n  const [dimensions, setDimensions] = useState(Dimensions.get(\"window\"));\r\n\r\n  const onChange = ({ window }: { window: ScaledSize }) => {\r\n    setDimensions(window);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const subscription = Dimensions.addEventListener(\"change\", onChange);\r\n\r\n    return () => {\r\n      // @ts-expect-error - React Native >= 0.65\r\n      if (typeof subscription?.remove === \"function\") {\r\n        // @ts-expect-error\r\n        subscription.remove();\r\n      } else {\r\n        // React Native < 0.65\r\n        Dimensions.removeEventListener(\"change\", onChange);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return dimensions;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}