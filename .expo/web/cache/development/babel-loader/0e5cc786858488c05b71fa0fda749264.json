{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { host } from \"../../Constants\";\nimport { AppContext } from \"../../context\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar Company = function Company() {\n  var _useState = useState({\n    name: \"\",\n    slug: \"\"\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      company = _useState2[0],\n      setCompany = _useState2[1];\n\n  var user = useContext(AppContext);\n\n  var getCompanies = function getCompanies() {\n    var companyId, response;\n    return _regeneratorRuntime.async(function getCompanies$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"companyId\"));\n\n          case 3:\n            companyId = _context.sent;\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(fetch(host + \"/company/byId\", {\n              method: \"POST\",\n              headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify({\n                user: user.user,\n                companyId: companyId\n              })\n            }));\n\n          case 6:\n            response = _context.sent;\n            _context.next = 9;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 9:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 12]], Promise);\n  };\n\n  useEffect(function _callee() {\n    var co;\n    return _regeneratorRuntime.async(function _callee$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(getCompanies());\n\n          case 2:\n            co = _context2.sent;\n            setCompany(_objectSpread(_objectSpread({}, company), {}, {\n              name: co.name,\n              slug: co.slug\n            }));\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, []);\n\n  var updateCompany = function updateCompany() {\n    var companyId, response;\n    return _regeneratorRuntime.async(function updateCompany$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            _context3.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"companyId\"));\n\n          case 3:\n            companyId = _context3.sent;\n            _context3.next = 6;\n            return _regeneratorRuntime.awrap(fetch(host + \"/company\", {\n              method: \"POST\",\n              headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify({\n                companyId: companyId,\n                data: company\n              })\n            }));\n\n          case 6:\n            response = _context3.sent;\n            alert(\"done\");\n            _context3.next = 10;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 10:\n            return _context3.abrupt(\"return\", _context3.sent);\n\n          case 13:\n            _context3.prev = 13;\n            _context3.t0 = _context3[\"catch\"](0);\n            console.log(_context3.t0);\n\n          case 16:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[0, 13]], Promise);\n  };\n\n  return _jsxs(View, {\n    style: styles.cardContainer,\n    children: [_jsxs(View, {\n      style: {\n        marginBottom: 10\n      },\n      children: [_jsx(Text, {\n        style: {\n          marginBottom: 10\n        },\n        children: \"Company Name\"\n      }), _jsx(TextInput, {\n        style: styles.input,\n        value: company.name,\n        onChangeText: function onChangeText(v) {\n          return setCompany(_objectSpread(_objectSpread({}, company), {}, {\n            name: v\n          }));\n        }\n      })]\n    }), _jsxs(View, {\n      style: {\n        flexDirection: \"row\",\n        marginBottom: 10\n      },\n      children: [_jsx(Text, {\n        style: {\n          margin: 10,\n          width: \"20%\"\n        },\n        children: \"Slug\"\n      }), _jsx(TextInput, {\n        style: styles.input,\n        value: company.slug,\n        onChangeText: function onChangeText(v) {\n          return setCompany(_objectSpread(_objectSpread({}, company), {}, {\n            slug: v\n          }));\n        }\n      })]\n    }), _jsx(View, {\n      style: {\n        alignItems: \"center\"\n      },\n      children: _jsx(TouchableOpacity, {\n        style: styles.sendButton,\n        onPress: updateCompany,\n        children: _jsx(Text, {\n          style: {\n            color: \"white\"\n          },\n          children: \"Save\"\n        })\n      })\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  cardContainer: {\n    width: \"95%\",\n    maxWidth: 480,\n    backgroundColor: \"white\",\n    padding: 30,\n    margin: 10,\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 5\n    },\n    shadowOpacity: 0.34,\n    shadowRadius: 6.27,\n    elevation: 10,\n    borderRadius: 10\n  },\n  input: {\n    width: \"80%\",\n    height: 40,\n    borderWidth: 1,\n    borderRadius: 5,\n    borderColor: \"#CCCCCC\"\n  },\n  sendButton: {\n    backgroundColor: \"black\",\n    borderRadius: 5,\n    height: 40,\n    width: 80,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  }\n});\nexport default Company;","map":{"version":3,"sources":["C:/Users/ez99032/Documents/Apps/linestron/linestron-front-end/components/admin/Company.js"],"names":["useContext","useEffect","useState","host","AppContext","AsyncStorage","Company","name","slug","company","setCompany","user","getCompanies","getItem","companyId","fetch","method","headers","Accept","body","JSON","stringify","response","json","console","log","co","updateCompany","data","alert","styles","cardContainer","marginBottom","input","v","flexDirection","margin","width","alignItems","sendButton","color","StyleSheet","create","maxWidth","backgroundColor","padding","shadowColor","shadowOffset","height","shadowOpacity","shadowRadius","elevation","borderRadius","borderWidth","borderColor","justifyContent"],"mappings":"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","sourcesContent":["import { Text, View, StyleSheet, TextInput, TouchableOpacity } from \"react-native\";\r\nimport { useContext, useEffect, useState } from \"react\";\r\nimport { host } from \"../../Constants\";\r\nimport { AppContext } from \"../../context\";\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\n\r\nconst Company = () => {\r\n\tconst [company, setCompany] = useState({ name: \"\", slug: \"\" });\r\n\tconst user = useContext(AppContext);\r\n\tconst getCompanies = async () => {\r\n\t\ttry {\r\n\t\t\tconst companyId = await AsyncStorage.getItem(\"companyId\");\r\n\t\t\tconst response = await fetch(host + \"/company/byId\", {\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\theaders: { Accept: \"application/json\", \"Content-Type\": \"application/json\" },\r\n\t\t\t\tbody: JSON.stringify({ user: user.user, companyId: companyId }),\r\n\t\t\t});\r\n\t\t\treturn await response.json();\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\t};\r\n\r\n\tuseEffect(async () => {\r\n\t\tconst co = await getCompanies();\r\n\t\tsetCompany({ ...company, name: co.name, slug: co.slug });\r\n\t}, []);\r\n\r\n\tconst updateCompany = async () => {\r\n\t\ttry {\r\n\t\t\tconst companyId = await AsyncStorage.getItem(\"companyId\");\r\n\t\t\tconst response = await fetch(host + \"/company\", {\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\theaders: { Accept: \"application/json\", \"Content-Type\": \"application/json\" },\r\n\t\t\t\tbody: JSON.stringify({ companyId: companyId, data: company }),\r\n\t\t\t});\r\n\t\t\talert(\"done\");\r\n\t\t\treturn await response.json();\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<View style={styles.cardContainer}>\r\n\t\t\t<View style={{ marginBottom: 10 }}>\r\n\t\t\t\t<Text style={{ marginBottom: 10 }}>Company Name</Text>\r\n\t\t\t\t<TextInput\r\n\t\t\t\t\tstyle={styles.input}\r\n\t\t\t\t\tvalue={company.name}\r\n\t\t\t\t\tonChangeText={(v) => setCompany({ ...company, name: v })}\r\n\t\t\t\t/>\r\n\t\t\t</View>\r\n\t\t\t<View style={{ flexDirection: \"row\", marginBottom: 10 }}>\r\n\t\t\t\t<Text style={{ margin: 10, width: \"20%\" }}>Slug</Text>\r\n\t\t\t\t<TextInput\r\n\t\t\t\t\tstyle={styles.input}\r\n\t\t\t\t\tvalue={company.slug}\r\n\t\t\t\t\tonChangeText={(v) => setCompany({ ...company, slug: v })}\r\n\t\t\t\t/>\r\n\t\t\t</View>\r\n\t\t\t<View style={{ alignItems: \"center\" }}>\r\n\t\t\t\t<TouchableOpacity style={styles.sendButton} onPress={updateCompany}>\r\n\t\t\t\t\t<Text style={{ color: \"white\" }}>Save</Text>\r\n\t\t\t\t</TouchableOpacity>\r\n\t\t\t</View>\r\n\t\t</View>\r\n\t);\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n\tcardContainer: {\r\n\t\twidth: \"95%\",\r\n\t\tmaxWidth: 480,\r\n\t\tbackgroundColor: \"white\",\r\n\t\tpadding: 30,\r\n\t\tmargin: 10,\r\n\t\tshadowColor: \"#000\",\r\n\t\tshadowOffset: {\r\n\t\t\twidth: 0,\r\n\t\t\theight: 5,\r\n\t\t},\r\n\t\tshadowOpacity: 0.34,\r\n\t\tshadowRadius: 6.27,\r\n\t\televation: 10,\r\n\t\tborderRadius: 10,\r\n\t},\r\n\tinput: {\r\n\t\twidth: \"80%\",\r\n\t\theight: 40,\r\n\t\tborderWidth: 1,\r\n\t\tborderRadius: 5,\r\n\t\tborderColor: \"#CCCCCC\",\r\n\t},\r\n\tsendButton: {\r\n\t\tbackgroundColor: \"black\",\r\n\t\tborderRadius: 5,\r\n\t\theight: 40,\r\n\t\twidth: 80,\r\n\t\talignItems: \"center\",\r\n\t\tjustifyContent: \"center\",\r\n\t},\r\n});\r\n\r\nexport default Company;\r\n"]},"metadata":{},"sourceType":"module"}