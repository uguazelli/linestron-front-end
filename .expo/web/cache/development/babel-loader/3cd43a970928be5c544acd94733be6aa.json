{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar AuthLogin = function AuthLogin(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState({\n    email: \"\",\n    password: \"\"\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      userCredentials = _useState2[0],\n      setUserCredential = _useState2[1];\n\n  var url = \"http://localhost:3000/auth/login\";\n  var headers = {\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json\",\n    \"Access-Control-Allow-Credentials\": true\n  };\n  var body = JSON.stringify(userCredentials);\n\n  var login = function login() {\n    var response;\n    return _regeneratorRuntime.async(function login$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(fetch(url, {\n              method: \"POST\",\n              credentials: \"include\",\n              headers: headers,\n              body: body\n            }));\n\n          case 3:\n            response = _context.sent;\n            Alert.alert(\"It works\");\n            navigation.navigate(\"/admin\");\n            _context.next = 11;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](0);\n            Alert.alert(_context.t0);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 8]], Promise);\n  };\n\n  return _jsxs(View, {\n    children: [_jsx(Header, {\n      children: \"Welcome back.\"\n    }), _jsx(TextInput, {\n      label: \"Email\",\n      returnKeyType: \"next\",\n      value: email.value,\n      onChangeText: function onChangeText(text) {\n        return setEmail({\n          value: text,\n          error: \"\"\n        });\n      },\n      error: !!email.error,\n      errorText: email.error,\n      autoCapitalize: \"none\",\n      autoCompleteType: \"email\",\n      textContentType: \"emailAddress\",\n      keyboardType: \"email-address\"\n    }), _jsx(TextInput, {\n      label: \"Password\",\n      returnKeyType: \"done\",\n      value: password.value,\n      onChangeText: function onChangeText(text) {\n        return setPassword({\n          value: text,\n          error: \"\"\n        });\n      },\n      error: !!password.error,\n      errorText: password.error,\n      secureTextEntry: true\n    }), _jsx(View, {\n      style: styles.forgotPassword,\n      children: _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          return navigation.navigate(\"ResetPasswordScreen\");\n        },\n        children: _jsx(Text, {\n          style: styles.forgot,\n          children: \"Forgot your password?\"\n        })\n      })\n    }), _jsx(Button, {\n      mode: \"contained\",\n      onPress: onLoginPressed,\n      children: \"Login\"\n    }), _jsxs(View, {\n      style: styles.row,\n      children: [_jsx(Text, {\n        children: \"Don't have an account? \"\n      }), _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          return navigation.replace(\"RegisterScreen\");\n        },\n        children: _jsx(Text, {\n          style: styles.link,\n          children: \"Sign up\"\n        })\n      })]\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  forgotPassword: {\n    width: \"100%\",\n    alignItems: \"flex-end\",\n    marginBottom: 24\n  },\n  row: {\n    flexDirection: \"row\",\n    marginTop: 4\n  },\n  forgot: {\n    fontSize: 13,\n    color: theme.colors.secondary\n  },\n  link: {\n    fontWeight: \"bold\",\n    color: theme.colors.primary\n  }\n});\nexport default AuthLogin;","map":{"version":3,"sources":["C:/Users/ez99032/Documents/Apps/linestron/linestron-front-end/components/admin/AuthLogin.js"],"names":["useState","AuthLogin","navigation","email","password","userCredentials","setUserCredential","url","headers","Accept","body","JSON","stringify","login","fetch","method","credentials","response","Alert","alert","navigate","value","text","setEmail","error","setPassword","styles","forgotPassword","forgot","onLoginPressed","row","replace","link","StyleSheet","create","width","alignItems","marginBottom","flexDirection","marginTop","fontSize","color","theme","colors","secondary","fontWeight","primary"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\r\nimport { StyleSheet, Text, View, TextInput, TouchableOpacity, Alert } from \"react-native\";\r\n\r\nconst AuthLogin = ({ navigation }) => {\r\n\tconst [userCredentials, setUserCredential] = useState({ email: \"\", password: \"\" });\r\n\r\n\tconst url = \"http://localhost:3000/auth/login\";\r\n\tconst headers = {\r\n\t\tAccept: \"application/json\",\r\n\t\t\"Content-Type\": \"application/json\",\r\n\t\t\"Access-Control-Allow-Credentials\": true,\r\n\t};\r\n\tconst body = JSON.stringify(userCredentials);\r\n\r\n\tconst login = async () => {\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(url, { method: \"POST\", credentials: \"include\", headers: headers, body: body });\r\n\t\t\tAlert.alert(\"It works\");\r\n\t\t\tnavigation.navigate(\"/admin\");\r\n\t\t} catch (error) {\r\n\t\t\tAlert.alert(error);\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t// <View style={styles.container}>\r\n\t\t// \t<Text>Email </Text>\r\n\t\t// \t<TextInput style={styles.input} onChangeText={(v) => setUserCredential({ ...userCredentials, email: v })} />\r\n\t\t// \t<Text>Password </Text>\r\n\t\t// \t<TextInput style={styles.input} onChangeText={(v) => setUserCredential({ ...userCredentials, password: v })} />\r\n\t\t// \t<TouchableOpacity style={styles.sendButton} onPress={login}>\r\n\t\t// \t\t<Text style={{ color: \"white\" }}>Send</Text>\r\n\t\t// \t</TouchableOpacity>\r\n\t\t// </View>\r\n\r\n\t\t<View>\r\n\t\t\t<Header>Welcome back.</Header>\r\n\t\t\t<TextInput\r\n\t\t\t\tlabel=\"Email\"\r\n\t\t\t\treturnKeyType=\"next\"\r\n\t\t\t\tvalue={email.value}\r\n\t\t\t\tonChangeText={(text) => setEmail({ value: text, error: \"\" })}\r\n\t\t\t\terror={!!email.error}\r\n\t\t\t\terrorText={email.error}\r\n\t\t\t\tautoCapitalize=\"none\"\r\n\t\t\t\tautoCompleteType=\"email\"\r\n\t\t\t\ttextContentType=\"emailAddress\"\r\n\t\t\t\tkeyboardType=\"email-address\"\r\n\t\t\t/>\r\n\t\t\t<TextInput\r\n\t\t\t\tlabel=\"Password\"\r\n\t\t\t\treturnKeyType=\"done\"\r\n\t\t\t\tvalue={password.value}\r\n\t\t\t\tonChangeText={(text) => setPassword({ value: text, error: \"\" })}\r\n\t\t\t\terror={!!password.error}\r\n\t\t\t\terrorText={password.error}\r\n\t\t\t\tsecureTextEntry\r\n\t\t\t/>\r\n\t\t\t<View style={styles.forgotPassword}>\r\n\t\t\t\t<TouchableOpacity onPress={() => navigation.navigate(\"ResetPasswordScreen\")}>\r\n\t\t\t\t\t<Text style={styles.forgot}>Forgot your password?</Text>\r\n\t\t\t\t</TouchableOpacity>\r\n\t\t\t</View>\r\n\t\t\t<Button mode=\"contained\" onPress={onLoginPressed}>\r\n\t\t\t\tLogin\r\n\t\t\t</Button>\r\n\t\t\t<View style={styles.row}>\r\n\t\t\t\t<Text>Don't have an account? </Text>\r\n\t\t\t\t<TouchableOpacity onPress={() => navigation.replace(\"RegisterScreen\")}>\r\n\t\t\t\t\t<Text style={styles.link}>Sign up</Text>\r\n\t\t\t\t</TouchableOpacity>\r\n\t\t\t</View>\r\n\t\t</View>\r\n\t);\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n\tforgotPassword: {\r\n\t\twidth: \"100%\",\r\n\t\talignItems: \"flex-end\",\r\n\t\tmarginBottom: 24,\r\n\t},\r\n\trow: {\r\n\t\tflexDirection: \"row\",\r\n\t\tmarginTop: 4,\r\n\t},\r\n\tforgot: {\r\n\t\tfontSize: 13,\r\n\t\tcolor: theme.colors.secondary,\r\n\t},\r\n\tlink: {\r\n\t\tfontWeight: \"bold\",\r\n\t\tcolor: theme.colors.primary,\r\n\t},\r\n});\r\n\r\n// const styles = StyleSheet.create({\r\n// \tcontainer: {\r\n// \t\tmaxWidth: \"100%\",\r\n// \t\talignItems: \"center\",\r\n// \t\tjustifyContent: \"center\",\r\n// \t},\r\n// \tinput: {\r\n// \t\theight: 40,\r\n// \t\tmargin: 12,\r\n// \t\tborderWidth: 1,\r\n// \t\tpadding: 10,\r\n// \t},\r\n// \tsendButton: {\r\n// \t\tbackgroundColor: \"green\",\r\n// \t\theight: 40,\r\n// \t\twidth: 80,\r\n// \t\talignItems: \"center\",\r\n// \t\tjustifyContent: \"center\",\r\n// \t},\r\n// });\r\n\r\nexport default AuthLogin;\r\n"]},"metadata":{},"sourceType":"module"}