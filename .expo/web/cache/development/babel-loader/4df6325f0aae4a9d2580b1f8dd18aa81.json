{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { Picker } from \"@react-native-picker/picker\";\nimport { useEffect, useState } from \"react\";\nimport { host } from \"../../Constants\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar Companies = function Companies(_ref) {\n  var route = _ref.route,\n      navigation = _ref.navigation;\n  var companyID = route.params.id;\n\n  var _useState = useState({\n    id: \"\",\n    name: \"\",\n    slug: \"\"\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      company = _useState2[0],\n      setCompany = _useState2[1];\n\n  var getCompanies = function getCompanies() {\n    var response;\n    return _regeneratorRuntime.async(function getCompanies$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(fetch(host + \"/company/\" + companyID, {\n              method: \"GET\",\n              credentials: \"include\",\n              headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\"\n              }\n            }));\n\n          case 3:\n            response = _context.sent;\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 6:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 9]], Promise);\n  };\n\n  useEffect(function _callee() {\n    var co;\n    return _regeneratorRuntime.async(function _callee$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(getCompanies());\n\n          case 2:\n            co = _context2.sent;\n            setCompany(_objectSpread(_objectSpread({}, company), {}, {\n              id: companyID,\n              name: co.name,\n              slug: co.slug\n            }));\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, []);\n  return _jsx(ScrollView, {\n    contentContainerStyle: {\n      alignItems: \"center\"\n    },\n    children: _jsxs(View, {\n      style: styles.cardContainer,\n      children: [_jsxs(View, {\n        style: {\n          flexDirection: \"row\",\n          marginBottom: 10\n        },\n        children: [_jsx(Text, {\n          style: {\n            margin: 10,\n            width: \"20%\"\n          },\n          children: \"Company Name\"\n        }), _jsx(TextInput, {\n          style: styles.input\n        })]\n      }), _jsxs(View, {\n        style: {\n          flexDirection: \"row\",\n          marginBottom: 10\n        },\n        children: [_jsx(Text, {\n          style: {\n            margin: 10,\n            width: \"20%\"\n          },\n          children: \"Slug\"\n        }), _jsx(TextInput, {\n          style: styles.input\n        })]\n      }), _jsx(View, {\n        style: {\n          alignItems: \"center\"\n        },\n        children: _jsx(TouchableOpacity, {\n          style: styles.sendButton,\n          children: _jsx(Text, {\n            style: {\n              color: \"white\"\n            },\n            children: \"Save\"\n          })\n        })\n      })]\n    })\n  });\n};\n\nvar styles = StyleSheet.create({\n  cardContainer: {\n    width: \"95%\",\n    maxWidth: 640,\n    backgroundColor: \"white\",\n    padding: 30,\n    margin: 10,\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 5\n    },\n    shadowOpacity: 0.34,\n    shadowRadius: 6.27,\n    elevation: 10,\n    borderRadius: 10\n  },\n  input: {\n    width: \"80%\",\n    height: 40,\n    borderWidth: 1,\n    borderRadius: 5\n  },\n  sendButton: {\n    backgroundColor: \"black\",\n    borderRadius: 5,\n    height: 40,\n    width: 80,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  }\n});\nexport default Companies;","map":{"version":3,"sources":["C:/Users/ez99032/Documents/Apps/linestron/linestron-front-end/components/admin/Companies.js"],"names":["Picker","useEffect","useState","host","Companies","route","navigation","companyID","params","id","name","slug","company","setCompany","getCompanies","fetch","method","credentials","headers","Accept","response","json","console","log","co","alignItems","styles","cardContainer","flexDirection","marginBottom","margin","width","input","sendButton","color","StyleSheet","create","maxWidth","backgroundColor","padding","shadowColor","shadowOffset","height","shadowOpacity","shadowRadius","elevation","borderRadius","borderWidth","justifyContent"],"mappings":"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","sourcesContent":["import { Text, View, StyleSheet, TextInput, TouchableOpacity, ScrollView } from \"react-native\";\r\nimport { Picker } from \"@react-native-picker/picker\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { host } from \"../../Constants\";\r\n\r\nconst Companies = ({ route, navigation }) => {\r\n\tconst companyID = route.params.id;\r\n\tconst [company, setCompany] = useState({ id: \"\", name: \"\", slug: \"\" });\r\n\r\n\tconst getCompanies = async () => {\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(host + \"/company/\" + companyID, {\r\n\t\t\t\tmethod: \"GET\",\r\n\t\t\t\tcredentials: \"include\",\r\n\t\t\t\theaders: { Accept: \"application/json\", \"Content-Type\": \"application/json\" },\r\n\t\t\t});\r\n\t\t\treturn await response.json();\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\t};\r\n\r\n\tuseEffect(async () => {\r\n\t\tconst co = await getCompanies();\r\n\t\tsetCompany({ ...company, id: companyID, name: co.name, slug: co.slug });\r\n\t}, []);\r\n\r\n\t// const updateCompany = async () => {\r\n\t// \ttry {\r\n\t// \t\tconst response = await fetch(host + \"/company/\" + companyForm.id, {\r\n\t// \t\t\tmethod: \"POST\",\r\n\t// \t\t\tcredentials: \"include\",\r\n\t// \t\t\theaders: { Accept: \"application/json\", \"Content-Type\": \"application/json\" },\r\n\t// \t\t\tbody: JSON.stringify(companyForm),\r\n\t// \t\t});\r\n\t// \t\talert(\"done\");\r\n\t// \t\treturn await response.json();\r\n\t// \t} catch (error) {\r\n\t// \t\tconsole.log(error);\r\n\t// \t}\r\n\t// };\r\n\r\n\treturn (\r\n\t\t<ScrollView contentContainerStyle={{ alignItems: \"center\" }}>\r\n\t\t\t<View style={styles.cardContainer}>\r\n\t\t\t\t<View style={{ flexDirection: \"row\", marginBottom: 10 }}>\r\n\t\t\t\t\t<Text style={{ margin: 10, width: \"20%\" }}>Company Name</Text>\r\n\t\t\t\t\t<TextInput style={styles.input} />\r\n\t\t\t\t</View>\r\n\t\t\t\t<View style={{ flexDirection: \"row\", marginBottom: 10 }}>\r\n\t\t\t\t\t<Text style={{ margin: 10, width: \"20%\" }}>Slug</Text>\r\n\t\t\t\t\t<TextInput style={styles.input} />\r\n\t\t\t\t</View>\r\n\t\t\t\t<View style={{ alignItems: \"center\" }}>\r\n\t\t\t\t\t<TouchableOpacity style={styles.sendButton}>\r\n\t\t\t\t\t\t<Text style={{ color: \"white\" }}>Save</Text>\r\n\t\t\t\t\t</TouchableOpacity>\r\n\t\t\t\t</View>\r\n\t\t\t</View>\r\n\t\t</ScrollView>\r\n\t);\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n\tcardContainer: {\r\n\t\twidth: \"95%\",\r\n\t\tmaxWidth: 640,\r\n\t\tbackgroundColor: \"white\",\r\n\t\tpadding: 30,\r\n\t\tmargin: 10,\r\n\t\tshadowColor: \"#000\",\r\n\t\tshadowOffset: {\r\n\t\t\twidth: 0,\r\n\t\t\theight: 5,\r\n\t\t},\r\n\t\tshadowOpacity: 0.34,\r\n\t\tshadowRadius: 6.27,\r\n\t\televation: 10,\r\n\t\tborderRadius: 10,\r\n\t},\r\n\tinput: {\r\n\t\twidth: \"80%\",\r\n\t\theight: 40,\r\n\t\tborderWidth: 1,\r\n\t\tborderRadius: 5,\r\n\t},\r\n\tsendButton: {\r\n\t\tbackgroundColor: \"black\",\r\n\t\tborderRadius: 5,\r\n\t\theight: 40,\r\n\t\twidth: 80,\r\n\t\talignItems: \"center\",\r\n\t\tjustifyContent: \"center\",\r\n\t},\r\n});\r\nexport default Companies;\r\n"]},"metadata":{},"sourceType":"module"}