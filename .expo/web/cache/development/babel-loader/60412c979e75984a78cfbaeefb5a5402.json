{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport Ionicons from \"@expo/vector-icons/Ionicons\";\nimport Settings from \"./Settings\";\nimport Emit from \"./Emit\";\nimport Admin from \"./admin/Admin\";\nimport LoginPage from \"./authentication/LoginPage\";\nimport { useEffect, useState } from \"react\";\nimport { host } from \"../Constants\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar Tab = createBottomTabNavigator();\nvar Stack = createNativeStackNavigator();\n\nfunction Home() {\n  return _jsxs(Tab.Navigator, {\n    screenOptions: function screenOptions(_ref) {\n      var route = _ref.route;\n      return {\n        tabBarIcon: function tabBarIcon(_ref2) {\n          var focused = _ref2.focused,\n              color = _ref2.color,\n              size = _ref2.size;\n          var iconName;\n          if (route.name === \"/\") iconName = \"notifications-outline\";else if (route.name === \"/settings\") iconName = \"settings-outline\";\n          return _jsx(Ionicons, {\n            name: iconName,\n            size: size,\n            color: color\n          });\n        },\n        tabBarActiveTintColor: \"green\",\n        tabBarInactiveTintColor: \"gray\"\n      };\n    },\n    children: [_jsx(Tab.Screen, {\n      name: \"/settings\",\n      component: Settings,\n      options: {\n        title: \"Settings\"\n      }\n    }), _jsx(Tab.Screen, {\n      name: \"/\",\n      component: Emit,\n      options: {\n        title: \"Emit\"\n      }\n    })]\n  });\n}\n\nexport default function NavigationTab() {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      authenticated = _useState2[0],\n      setAuthenticated = _useState2[1];\n\n  var authenticate = function authenticate() {\n    var response, json;\n    return _regeneratorRuntime.async(function authenticate$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(fetch(host + \"/auth/loggeduser\", {\n              method: \"GET\",\n              credentials: \"include\"\n            }));\n\n          case 3:\n            response = _context.sent;\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 6:\n            json = _context.sent;\n            setAuthenticated(json);\n            _context.next = 13;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 10]], Promise);\n  };\n\n  useEffect(function () {\n    authenticate();\n  }, []);\n  return _jsx(NavigationContainer, {\n    children: _jsx(Stack.Navigator, {\n      children: authenticated.ok === true ? _jsxs(_Fragment, {\n        children: [_jsx(Stack.Screen, {\n          name: \"Home\",\n          component: Home,\n          options: {\n            headerShown: false\n          }\n        }), _jsx(Stack.Screen, {\n          name: \"/admin\",\n          component: Admin,\n          options: {\n            title: \"Admin\"\n          }\n        })]\n      }) : _jsx(_Fragment, {\n        children: _jsx(Stack.Screen, {\n          name: \"/login\",\n          component: LoginPage\n        })\n      })\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  }\n});","map":{"version":3,"sources":["C:/Users/ez99032/Documents/Apps/linestron/linestron-front-end/components/NavigationTab.js"],"names":["NavigationContainer","createBottomTabNavigator","createNativeStackNavigator","Ionicons","Settings","Emit","Admin","LoginPage","useEffect","useState","host","Tab","Stack","Home","route","tabBarIcon","focused","color","size","iconName","name","tabBarActiveTintColor","tabBarInactiveTintColor","title","NavigationTab","authenticated","setAuthenticated","authenticate","fetch","method","credentials","response","json","console","log","ok","headerShown","styles","StyleSheet","create","container","flex","backgroundColor","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import { StyleSheet } from \"react-native\";\r\nimport { NavigationContainer } from \"@react-navigation/native\";\r\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\r\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\r\nimport Ionicons from \"react-native-vector-icons/Ionicons\";\r\nimport Settings from \"./Settings\";\r\nimport Emit from \"./Emit\";\r\nimport Admin from \"./admin/Admin\";\r\nimport LoginPage from \"./authentication/LoginPage\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { host } from \"../Constants\";\r\n\r\nconst Tab = createBottomTabNavigator();\r\nconst Stack = createNativeStackNavigator();\r\n\r\nfunction Home() {\r\n\treturn (\r\n\t\t<Tab.Navigator\r\n\t\t\tscreenOptions={({ route }) => ({\r\n\t\t\t\ttabBarIcon: ({ focused, color, size }) => {\r\n\t\t\t\t\tlet iconName;\r\n\t\t\t\t\tif (route.name === \"/\") iconName = \"notifications-outline\";\r\n\t\t\t\t\telse if (route.name === \"/settings\") iconName = \"settings-outline\";\r\n\t\t\t\t\t// You can return any component that you like here!\r\n\t\t\t\t\treturn <Ionicons name={iconName} size={size} color={color} />;\r\n\t\t\t\t},\r\n\t\t\t\ttabBarActiveTintColor: \"green\",\r\n\t\t\t\ttabBarInactiveTintColor: \"gray\",\r\n\t\t\t})}\r\n\t\t>\r\n\t\t\t<Tab.Screen name=\"/settings\" component={Settings} options={{ title: \"Settings\" }} />\r\n\t\t\t<Tab.Screen name=\"/\" component={Emit} options={{ title: \"Emit\" }} />\r\n\t\t</Tab.Navigator>\r\n\t);\r\n}\r\n\r\nexport default function NavigationTab() {\r\n\tconst [authenticated, setAuthenticated] = useState(\"\");\r\n\tconst authenticate = async () => {\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(host + \"/auth/loggeduser\", {\r\n\t\t\t\tmethod: \"GET\",\r\n\t\t\t\tcredentials: \"include\",\r\n\t\t\t});\r\n\t\t\tconst json = await response.json();\r\n\t\t\tsetAuthenticated(json);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\t};\r\n\tuseEffect(() => {\r\n\t\tauthenticate();\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<NavigationContainer>\r\n\t\t\t<Stack.Navigator>\r\n\t\t\t\t{authenticated.ok === true ? (\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t\t<Stack.Screen name=\"Home\" component={Home} options={{ headerShown: false }} />\r\n\t\t\t\t\t\t<Stack.Screen name=\"/admin\" component={Admin} options={{ title: \"Admin\" }} />\r\n\t\t\t\t\t</>\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t\t<Stack.Screen name=\"/login\" component={LoginPage} />\r\n\t\t\t\t\t</>\r\n\t\t\t\t)}\r\n\t\t\t</Stack.Navigator>\r\n\t\t</NavigationContainer>\r\n\t);\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n\tcontainer: {\r\n\t\tflex: 1,\r\n\t\tbackgroundColor: \"#fff\",\r\n\t\talignItems: \"center\",\r\n\t\tjustifyContent: \"center\",\r\n\t},\r\n});\r\n"]},"metadata":{},"sourceType":"module"}