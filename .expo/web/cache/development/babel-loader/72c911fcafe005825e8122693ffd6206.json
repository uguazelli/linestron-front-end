{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Picker } from \"@react-native-picker/picker\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { host } from \"../Constants\";\nimport { AppContext } from \"../context\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar Settings = function Settings(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      companies = _useState2[0],\n      setCompanies = _useState2[1];\n\n  var user = useContext(AppContext);\n\n  var getCompanies = function getCompanies() {\n    var response;\n    return _regeneratorRuntime.async(function getCompanies$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(user.email);\n            _context.prev = 1;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(fetch(host + \"/company/byemail\", {\n              method: \"POST\",\n              headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify({\n                email: \"guazelli.ugo@gmail.com\"\n              })\n            }));\n\n          case 4:\n            response = _context.sent;\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 7:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](1);\n            console.log(_context.t0);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 10]], Promise);\n  };\n\n  useEffect(function _callee() {\n    var com;\n    return _regeneratorRuntime.async(function _callee$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(getCompanies());\n\n          case 2:\n            com = _context2.sent;\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(setCompanies(com));\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, []);\n\n  var selectCompany = function selectCompany(companyID) {\n    var response, result;\n    return _regeneratorRuntime.async(function selectCompany$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (!(companyID !== \"\")) {\n              _context3.next = 15;\n              break;\n            }\n\n            _context3.prev = 1;\n            _context3.next = 4;\n            return _regeneratorRuntime.awrap(fetch(host + \"/admin/session/company/\" + companyID, {\n              method: \"GET\",\n              credentials: \"include\",\n              headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\"\n              }\n            }));\n\n          case 4:\n            response = _context3.sent;\n            _context3.next = 7;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 7:\n            result = _context3.sent;\n            navigation.navigate(\"/home\");\n            return _context3.abrupt(\"return\", result);\n\n          case 12:\n            _context3.prev = 12;\n            _context3.t0 = _context3[\"catch\"](1);\n            console.log(_context3.t0);\n\n          case 15:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[1, 12]], Promise);\n  };\n\n  return _jsxs(View, {\n    style: {\n      alignItems: \"center\",\n      justifyContent: \"center\"\n    },\n    children: [_jsx(Text, {\n      style: {\n        margin: 10,\n        width: \"20%\"\n      },\n      children: \"Select a company\"\n    }), _jsxs(Picker, {\n      style: styles.input,\n      onValueChange: function onValueChange(v, i) {\n        return selectCompany(v);\n      },\n      children: [_jsx(Picker.Item, {\n        label: \"Select a company\",\n        value: \"\"\n      }), companies.map(function (item) {\n        return _jsx(Picker.Item, {\n          label: item.name,\n          value: item.id\n        }, item.id);\n      })]\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  input: {\n    width: \"80%\",\n    height: 40,\n    borderWidth: 1,\n    borderRadius: 5\n  }\n});\nexport default Settings;","map":{"version":3,"sources":["C:/Users/ez99032/Documents/Apps/linestron/linestron-front-end/components/Settings.js"],"names":["Picker","useContext","useEffect","useState","host","AppContext","Settings","navigation","companies","setCompanies","user","getCompanies","console","log","email","fetch","method","headers","Accept","body","JSON","stringify","response","json","com","selectCompany","companyID","credentials","result","navigate","alignItems","justifyContent","margin","width","styles","input","v","i","map","item","name","id","StyleSheet","create","height","borderWidth","borderRadius"],"mappings":"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","sourcesContent":["import { Text, View, StyleSheet } from \"react-native\";\r\nimport { Picker } from \"@react-native-picker/picker\";\r\nimport { useContext, useEffect, useState } from \"react\";\r\nimport { host } from \"../Constants\";\r\nimport { AppContext } from \"../context\";\r\n\r\nconst Settings = ({ navigation }) => {\r\n\tconst [companies, setCompanies] = useState([]);\r\n\tconst user = useContext(AppContext);\r\n\r\n\tconst getCompanies = async () => {\r\n\t\tconsole.log(user.email);\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(host + \"/company/byemail\", {\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\theaders: { Accept: \"application/json\", \"Content-Type\": \"application/json\" },\r\n\t\t\t\tbody: JSON.stringify({ email: \"guazelli.ugo@gmail.com\" }),\r\n\t\t\t});\r\n\t\t\treturn await response.json();\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\t};\r\n\r\n\tuseEffect(async () => {\r\n\t\tconst com = await getCompanies();\r\n\t\tawait setCompanies(com);\r\n\t}, []);\r\n\r\n\tconst selectCompany = async (companyID) => {\r\n\t\tif (companyID !== \"\") {\r\n\t\t\ttry {\r\n\t\t\t\t// setting company id in backend\r\n\t\t\t\tconst response = await fetch(host + \"/admin/session/company/\" + companyID, {\r\n\t\t\t\t\tmethod: \"GET\",\r\n\t\t\t\t\tcredentials: \"include\",\r\n\t\t\t\t\theaders: { Accept: \"application/json\", \"Content-Type\": \"application/json\" },\r\n\t\t\t\t});\r\n\t\t\t\tlet result = await response.json();\r\n\t\t\t\tnavigation.navigate(\"/home\");\r\n\t\t\t\treturn result;\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.log(error);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<View style={{ alignItems: \"center\", justifyContent: \"center\" }}>\r\n\t\t\t<Text style={{ margin: 10, width: \"20%\" }}>Select a company</Text>\r\n\t\t\t<Picker style={styles.input} onValueChange={(v, i) => selectCompany(v)}>\r\n\t\t\t\t<Picker.Item label=\"Select a company\" value=\"\" />\r\n\t\t\t\t{companies.map((item) => (\r\n\t\t\t\t\t<Picker.Item key={item.id} label={item.name} value={item.id} />\r\n\t\t\t\t))}\r\n\t\t\t</Picker>\r\n\t\t</View>\r\n\t);\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n\tinput: {\r\n\t\twidth: \"80%\",\r\n\t\theight: 40,\r\n\t\tborderWidth: 1,\r\n\t\tborderRadius: 5,\r\n\t},\r\n});\r\n\r\nexport default Settings;\r\n"]},"metadata":{},"sourceType":"module"}