{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useEffect, useState } from \"react\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { host } from \"../../Constants\";\nimport AuthLogin from \"./AuthLogin\";\nimport MainMenu from \"./MainMenu\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar AdminRooms = function AdminRooms() {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      authenticated = _useState2[0],\n      setAuthenticated = _useState2[1];\n\n  var authenticate = function authenticate() {\n    var response, json;\n    return _regeneratorRuntime.async(function authenticate$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(fetch(host + \"/auth/loggeduser\", {\n              method: \"GET\",\n              credentials: \"include\"\n            }));\n\n          case 3:\n            response = _context.sent;\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 6:\n            json = _context.sent;\n            setAuthenticated(json);\n            _context.next = 13;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 10]], Promise);\n  };\n\n  useEffect(function () {\n    authenticate();\n  }, []);\n  return _jsx(View, {\n    children: authenticated.email !== undefined ? _jsx(MainMenu, {}) : _jsx(AuthLogin, {\n      setAuthenticated: setAuthenticated\n    })\n  });\n};\n\nexport default AdminRooms;","map":{"version":3,"sources":["C:/Users/ez99032/Documents/Apps/linestron/linestron-front-end/components/admin/AdminRooms.js"],"names":["useEffect","useState","host","AuthLogin","MainMenu","AdminRooms","authenticated","setAuthenticated","authenticate","fetch","method","credentials","response","json","console","log","email","undefined"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;;AAEA,SAASC,IAAT;AACA,OAAOC,SAAP;AACA,OAAOC,QAAP;;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AACxB,kBAA0CJ,QAAQ,CAAC,EAAD,CAAlD;AAAA;AAAA,MAAOK,aAAP;AAAA,MAAsBC,gBAAtB;;AAEA,MAAMC,YAAY,GAAG,SAAfA,YAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEIC,KAAK,CAACP,IAAI,GAAG,kBAAR,EAA4B;AACvDQ,cAAAA,MAAM,EAAE,KAD+C;AAEvDC,cAAAA,WAAW,EAAE;AAF0C,aAA5B,CAFT;;AAAA;AAEbC,YAAAA,QAFa;AAAA;AAAA,6CAMAA,QAAQ,CAACC,IAAT,EANA;;AAAA;AAMbA,YAAAA,IANa;AAOnBN,YAAAA,gBAAgB,CAACM,IAAD,CAAhB;AAPmB;AAAA;;AAAA;AAAA;AAAA;AASnBC,YAAAA,OAAO,CAACC,GAAR;;AATmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArB;;AAaAf,EAAAA,SAAS,CAAC,YAAM;AACfQ,IAAAA,YAAY;AACZ,GAFQ,EAEN,EAFM,CAAT;AAIA,SACC,KAAC,IAAD;AAAA,cAAOF,aAAa,CAACU,KAAd,KAAwBC,SAAxB,GAAoC,KAAC,QAAD,KAApC,GAAmD,KAAC,SAAD;AAAW,MAAA,gBAAgB,EAAEV;AAA7B;AAA1D,IADD;AAIA,CAxBD;;AA0BA,eAAeF,UAAf","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { Alert, View } from \"react-native\";\r\nimport { host } from \"../../Constants\";\r\nimport AuthLogin from \"./AuthLogin\";\r\nimport MainMenu from \"./MainMenu\";\r\n\r\nconst AdminRooms = () => {\r\n\tconst [authenticated, setAuthenticated] = useState(\"\");\r\n\r\n\tconst authenticate = async () => {\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(host + \"/auth/loggeduser\", {\r\n\t\t\t\tmethod: \"GET\",\r\n\t\t\t\tcredentials: \"include\",\r\n\t\t\t});\r\n\t\t\tconst json = await response.json();\r\n\t\t\tsetAuthenticated(json);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tauthenticate();\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<View>{authenticated.email !== undefined ? <MainMenu /> : <AuthLogin setAuthenticated={setAuthenticated} />}</View>\r\n\t);\r\n\t// return <MainMenu />;\r\n};\r\n\r\nexport default AdminRooms;\r\n"]},"metadata":{},"sourceType":"module"}