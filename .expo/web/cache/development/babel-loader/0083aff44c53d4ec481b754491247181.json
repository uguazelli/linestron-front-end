{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { Picker } from \"@react-native-picker/picker\";\nimport { useEffect, useState } from \"react\";\nimport Companies from \"./admin/Companies\";\nimport Rooms from \"./admin/Rooms\";\nimport { host } from \"../Constants\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar Settings = function Settings() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      companies = _useState2[0],\n      setCompanies = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      selectedCompany = _useState4[0],\n      setSelectedCompany = _useState4[1];\n\n  var getCompanies = function getCompanies() {\n    var response;\n    return _regeneratorRuntime.async(function getCompanies$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(fetch(host + \"/company/byemail\", {\n              method: \"GET\",\n              credentials: \"include\",\n              headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\"\n              }\n            }));\n\n          case 3:\n            response = _context.sent;\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 6:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 9]], Promise);\n  };\n\n  useEffect(function _callee() {\n    var com;\n    return _regeneratorRuntime.async(function _callee$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(getCompanies());\n\n          case 2:\n            com = _context2.sent;\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(setCompanies(com));\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, []);\n  return _jsxs(View, {\n    style: {\n      alignItems: \"center\",\n      justifyContent: \"center\"\n    },\n    children: [_jsx(Text, {\n      style: {\n        margin: 10,\n        width: \"20%\"\n      },\n      children: \"Select a company\"\n    }), _jsxs(Picker, {\n      style: styles.input,\n      selectedValue: selectedCompany,\n      onValueChange: function onValueChange(itemValue, itemIndex) {\n        return setSelectedCompany(itemValue);\n      },\n      children: [_jsx(Picker.Item, {\n        label: \"Select a company\",\n        value: \"\"\n      }), companies.map(function (item) {\n        return _jsx(Picker.Item, {\n          label: item.name,\n          value: item.slug\n        }, item.id);\n      })]\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  cardContainer: {\n    width: \"95%\",\n    maxWidth: 640,\n    backgroundColor: \"white\",\n    padding: 30,\n    margin: 10,\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 5\n    },\n    shadowOpacity: 0.34,\n    shadowRadius: 6.27,\n    elevation: 10,\n    borderRadius: 10\n  },\n  input: {\n    width: \"80%\",\n    height: 40,\n    borderWidth: 1,\n    borderRadius: 5\n  },\n  sendButton: {\n    backgroundColor: \"black\",\n    borderRadius: 5,\n    height: 40,\n    width: 80,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  }\n});\nexport default Settings;","map":{"version":3,"sources":["C:/Users/ez99032/Documents/Apps/linestron/linestron-front-end/components/Settings.js"],"names":["Picker","useEffect","useState","Companies","Rooms","host","Settings","companies","setCompanies","selectedCompany","setSelectedCompany","getCompanies","fetch","method","credentials","headers","Accept","response","json","console","log","com","alignItems","justifyContent","margin","width","styles","input","itemValue","itemIndex","map","item","name","slug","id","StyleSheet","create","cardContainer","maxWidth","backgroundColor","padding","shadowColor","shadowOffset","height","shadowOpacity","shadowRadius","elevation","borderRadius","borderWidth","sendButton"],"mappings":"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","sourcesContent":["import { Text, View, StyleSheet, ScrollView, TextInput, TouchableOpacity } from \"react-native\";\r\nimport { Picker } from \"@react-native-picker/picker\";\r\nimport { useEffect, useState } from \"react\";\r\nimport Companies from \"./admin/Companies\";\r\nimport Rooms from \"./admin/Rooms\";\r\nimport { host } from \"../Constants\";\r\n\r\nconst Settings = () => {\r\n\tconst [companies, setCompanies] = useState([]);\r\n\tconst [selectedCompany, setSelectedCompany] = useState(\"\");\r\n\r\n\tconst getCompanies = async () => {\r\n\t\ttry {\r\n\t\t\tconst response = await fetch(host + \"/company/byemail\", {\r\n\t\t\t\tmethod: \"GET\",\r\n\t\t\t\tcredentials: \"include\",\r\n\t\t\t\theaders: { Accept: \"application/json\", \"Content-Type\": \"application/json\" },\r\n\t\t\t});\r\n\t\t\treturn await response.json();\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\t};\r\n\r\n\tuseEffect(async () => {\r\n\t\tconst com = await getCompanies();\r\n\t\tawait setCompanies(com);\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t// <ScrollView contentContainerStyle={{ alignItems: \"center\" }}>\r\n\t\t// \t<Companies />\r\n\t\t// \t<Rooms />\r\n\t\t// </ScrollView>\r\n\t\t<View style={{ alignItems: \"center\", justifyContent: \"center\" }}>\r\n\t\t\t<Text style={{ margin: 10, width: \"20%\" }}>Select a company</Text>\r\n\t\t\t<Picker\r\n\t\t\t\tstyle={styles.input}\r\n\t\t\t\tselectedValue={selectedCompany}\r\n\t\t\t\tonValueChange={(itemValue, itemIndex) => setSelectedCompany(itemValue)}\r\n\t\t\t>\r\n\t\t\t\t<Picker.Item label=\"Select a company\" value=\"\" />\r\n\t\t\t\t{companies.map((item) => (\r\n\t\t\t\t\t<Picker.Item key={item.id} label={item.name} value={item.slug} />\r\n\t\t\t\t))}\r\n\t\t\t</Picker>\r\n\t\t</View>\r\n\t);\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n\tcardContainer: {\r\n\t\twidth: \"95%\",\r\n\t\tmaxWidth: 640,\r\n\t\tbackgroundColor: \"white\",\r\n\t\tpadding: 30,\r\n\t\tmargin: 10,\r\n\t\tshadowColor: \"#000\",\r\n\t\tshadowOffset: {\r\n\t\t\twidth: 0,\r\n\t\t\theight: 5,\r\n\t\t},\r\n\t\tshadowOpacity: 0.34,\r\n\t\tshadowRadius: 6.27,\r\n\t\televation: 10,\r\n\t\tborderRadius: 10,\r\n\t},\r\n\tinput: {\r\n\t\twidth: \"80%\",\r\n\t\theight: 40,\r\n\t\tborderWidth: 1,\r\n\t\tborderRadius: 5,\r\n\t},\r\n\tsendButton: {\r\n\t\tbackgroundColor: \"black\",\r\n\t\tborderRadius: 5,\r\n\t\theight: 40,\r\n\t\twidth: 80,\r\n\t\talignItems: \"center\",\r\n\t\tjustifyContent: \"center\",\r\n\t},\r\n});\r\n\r\nexport default Settings;\r\n"]},"metadata":{},"sourceType":"module"}